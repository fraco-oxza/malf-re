@startuml


skinparam nodesep 50
skinparam ranksep 80

package automatons {
    abstract class Automaton {
        #states
        #alphabet
        #transitions
        #initialState
        #finalStates
        {abstract} +isMatch(String): boolean
        +toString(): String
    }

    class OptimizedDFA extends DFA {
        +OptimizedDFA(DFA)
        -optimize()
    }

    class DFA extends Automaton {
        +DFA(NFA)
        +isMatch(String): boolean
    }

    class NFA extends Automaton {
        +NFA(expressions.Expression)
        +isMatch(String): boolean
    }

    class Transition {
        -fromNode
        -character
        -toNode
    }
}

package expressions {
    abstract class Expression {
        {Abstract} +getNFA(): automatons.NFA
    }

    class Char extends Expression {
        - character: char
        +getNFA(): automatons.NFA
    }

    class Empty extends Expression {
        +getNFA(): automatons.NFA
    }

    class Disjunction extends Expression {
        -left: Expression
        -right: Expression
        +getNFA(): automatons.NFA
    }

    class Concatenation extends Expression {
        -left: Expression
        -right: Expression
        +getNFA(): automatons.NFA
    }

    class Kleene extends Expression {
        -expression: Expression
        +getNFA(): automatons.NFA
    }

    class Parenthesis extends Expression {
        -expr: Expression
        +getNFA(): automatons.NFA
    }

    class ExpressionFactory {
        {static} +parseExpression(String): Expression
    }

    class InvalidExpression extends Exception {
    }
}


ExpressionFactory .> Expression : creates
Expression .> InvalidExpression : throws
Expression .> NFA : creates
Automaton *- Transition
NFA . DFA


@enduml
